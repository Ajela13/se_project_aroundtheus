!function(){"use strict";class e{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_hideInputError(e){this._errorElement=this._formElement.querySelector(`.${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorElement.textContent=" ",this._errorElement.classList.remove(this._errorClass)}_showInputError(e,t){this._errorElement=this._formElement.querySelector(`.${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorElement.textContent=t,this._errorElement.classList.add(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_disableButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}_enableButton(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}_toggleButtonState(e){this._hasInvalidInput(e)?this._disableButton(this._buttonElement):this._enableButton(this._buttonElement)}_setEventListener(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(this._inputList),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputList)}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._formElement.reset(),this._formElement.querySelector("#confirmation-button")?this._enableButton():this._disableButton()})),this._setEventListener()}}class t{constructor(e,t,s,r,i){this._data=e,this._name=e.name,this._link=e.link,this._alt=e.alt,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=document.querySelector(t).content.firstElementChild,this._handleDeleteCard=r,this._handleLikeCard=i,this._handleImageClick=s,this._cardElement=this._cardSelector.cloneNode(!0),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardNameEl=this._cardElement.querySelector(".card__description-name"),this._deleteButton=this._cardElement.querySelector(".card__trash"),this._likeButton=this._cardElement.querySelector(".card__like-button")}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this._data)})),this._deleteButton.addEventListener("click",(()=>this._handleDeleteCard(this))),this._likeButton.addEventListener("click",(()=>this._handleLikeCard(this)))}handleDeleteButton(){this._cardElement.remove(),this._cardElement=null}handleLikeButton(e){this._isLiked=e,this._likeButton.classList.toggle("card__like-button_active")}_updateLikeIcon(){this._isLiked&&this.handleLikeButton(this._isLiked)}getCardElement(){return this._cardImageElement.src=this._link,this._cardNameEl.textContent=this._name,this._cardImageElement.alt=this._alt,this._setEventListeners(),this._updateLikeIcon(),this._cardElement}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>this.addInitialItems(e)))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}addInitialItems(e){const t=this._renderer(e);this._container.append(t)}}class r{constructor(e){this._modal=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._modal.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modal.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._modal.addEventListener("click",(e=>{e.target.classList.contains("modal__close")&&this.close(),e.target.classList.contains("modal")&&this.close()}))}}class i extends r{constructor(e,t){super(e),this._modalForm=this._modal.querySelector(".modal__form"),this._modalButton=this._modal.querySelector(".form__button"),this._handleFormSubmit=t,this._inputList=this._modalForm.querySelectorAll(".form__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setLoading(e,t){this._modalButton.textContent=e?"Saving...":t}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()})),super.setEventListeners()}}const n=document.querySelector("#profile-edit-button"),o=document.querySelector("#profile-edit-title"),a=document.querySelector("#profile-edit-description"),l=document.querySelector("#profile-add-button"),d=document.forms["modal-add-form"],h=document.querySelector("#profile-edit-avatar-button"),c=new class{constructor(){this.baseUrl="https://around-api.en.tripleten-services.com/v1",this.header={authorization:"4a267eba-b438-44d7-b955-12a5629fdd41","Content-Type":"application/json"}}_request(e,t){return fetch(e,t).then(this._checkRes)}_checkRes(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return this._request(`${this.baseUrl}/users/me`,{headers:this.header})}updateProfileInfo(e,t){return this._request(`${this.baseUrl}/users/me`,{headers:this.header,method:"PATCH",body:JSON.stringify({name:e,about:t})})}updateProfileAvatar(e){return this._request(`${this.baseUrl}/users/me/avatar`,{headers:this.header,method:"PATCH",body:JSON.stringify({avatar:e})})}getInitialCards(){return this._request(`${this.baseUrl}/cards`,{headers:this.header})}postCard(e,t){return this._request(`${this.baseUrl}/cards`,{headers:this.header,method:"POST",body:JSON.stringify({name:e,link:t})})}deleteCard(e){return this._request(`${this.baseUrl}/cards/${e}`,{headers:this.header,method:"DELETE"})}likeCard(e){return this._request(`${this.baseUrl}/cards/${e}/likes`,{headers:this.header,method:"PUT"})}dislikeCard(e){return this._request(`${this.baseUrl}/cards/${e}/likes`,{headers:this.header,method:"DELETE"})}},_=new class{constructor(e,t,s){this._profileTitleElement=document.querySelector(e),this._profileDescriptionElement=document.querySelector(t),this._profileAvatarElement=document.querySelector(s)}getUserInfo(){return{title:this._profileTitleElement.textContent,description:this._profileDescriptionElement.textContent.trim()}}setUserInfo(e){let{title:t,description:s}=e;this._profileTitleElement.textContent=t,this._profileDescriptionElement.textContent=s}setUserAvatar(e){let{avatar:t}=e;this._profileAvatarElement.src=t}}("#profile-title","#profile-description","#profile-avatar"),u=new i("#profile-add-modal",(function(e){u.setLoading(!0,"Create");const t=e.title,s=e["Image-link"];c.postCard(t,s).then((e=>{v.addItem(e),d.reset()})).catch((e=>{console.error("Error fetching user info:",e)})).finally((()=>{u.setLoading(!1,"Create")}))})),m=new i("#profile-edit-modal",(function(e){m.setLoading(!0,"Save"),c.updateProfileInfo(e.title,e.description).then((e=>(_.setUserInfo({title:e.name,description:e.about}),e))).catch((e=>{console.error("Error fetching user info:",e)})).finally((()=>{m.setLoading(!1,"Save")}))})),p=new i("#profile-edit-avatar-modal",(function(e){p.setLoading(!0,"Save"),c.updateProfileAvatar(e.avatar).then((e=>(_.setUserAvatar({avatar:e.avatar}),e))).catch((e=>{console.error("Error fetching user info:",e)})).finally((()=>{p.setLoading(!1,"Save")}))})),E=new class extends r{constructor(e){super(e),this._confirmationModalForm=this._modal.querySelector(".modal__form")}setSubmitAction(e){this._submitAction=e}setEventListeners(){super.setEventListeners(),this._confirmationModalForm.addEventListener("submit",(e=>{e.preventDefault(),this._submitAction(),this.close()}))}}("#confirmation-modal"),f=new class extends r{constructor(e){super(e),this._previewImage=this._modal.querySelector(".modal__image"),this._previewImageDescription=this._modal.querySelector(".preview_modal_description")}open(e){this._previewImage.src=e.link,this._previewImageDescription.textContent=e.name,this._previewImage.alt=e.alt,super.open()}}("#preview_image_modal");let v;function L(e){E.open(),E.setSubmitAction((()=>{c.deleteCard(e._id).then((t=>{e.handleDeleteButton()})).catch((e=>{console.error("Error fetching user info:",e)}))}))}function b(e){e._isLiked?c.dislikeCard(e._id).then((t=>{e.handleLikeButton(!1)})):c.likeCard(e._id).then((t=>{e.handleLikeButton(!0)}))}function S(e){f.open(e)}function g(e){return new t(e,"#card-template",S,L,b).getCardElement()}c.getUserInfo().then((e=>(_.setUserInfo({title:e.name,description:e.about}),_.setUserAvatar({avatar:e.avatar}),e))).catch((e=>{console.error("Error fetching user info:",e)})),c.getInitialCards().then((e=>{v=new s({items:e,renderer:g},".cards__list"),v.renderItems()})).catch((e=>{console.error("Error fetching user info:",e)})),n.addEventListener("click",(()=>{const e=_.getUserInfo();o.value=e.title,a.value=e.description,m.open()})),m.setEventListeners(),l.addEventListener("click",(()=>u.open())),u.setEventListeners(),h.addEventListener("click",(()=>p.open())),p.setEventListeners(),E.setEventListeners(),f.setEventListeners();const C={};var k;k={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},Array.from(document.querySelectorAll(k.formSelector)).forEach((t=>{const s=new e(k,t),r=t.getAttribute("name");C[r]=s,s.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,